@using Blazored.LocalStorage

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">AllProject</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="pharmacy-page">
                <span class="oi oi-plus" aria-hidden="true"></span> Eczane
            </NavLink>
        </div>
        <div class="nav-item px-3">
            @if (IsLogin == false)
            {
                <NavLink class="nav-link" href="/login-page">
                    <span class="oi oi-list-rich" aria-hidden="true"></span>Login
                </NavLink>
            }
            else
            {
                <NavLink class="nav-link" @onclick="Logout">
                    <span class="oi oi-list-rich" aria-hidden="true"></span>Logout 
                </NavLink>
            }

        </div>
        
       
    

    </nav>
</div>

@code {


    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private void ToggleNavMenu() { collapseNavMenu = !collapseNavMenu; }
    [Inject]
    ILocalStorageService _localStorageService { get; set; }
    [Inject]
    NavigationManager _navigation { get; set; }
    bool IsLogin;
    string city;


    protected async override Task OnInitializedAsync()
    {
        IsLogin = await _localStorageService.GetItemAsync<bool>("IsLogin");
        city = await _localStorageService.GetItemAsync<string>("City");
        StateHasChanged();
        
    }
    private async Task Logout()
    {
        // await _localStorageService.RemoveItemAsync("Email");
        // await _localStorageService.RemoveItemAsync("IsLogin");
        await _localStorageService.ClearAsync();
        _navigation.NavigateTo("/login-page");
    }
}
